package இயேரி.தமிழிசை;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public abstract class பாணி {
     பாணி.நடைஎண் நடைஎண்மாறி;


    /*
    துருவம்
    மட்டியம்
    ரூபம்
    சம்பை
    திரிபுடை
    அட
    ஏகம்
     */

    enum கைசைகை {
        தட்டு,
        எண்ணு,
        திருப்பு
    }

    enum நடைஎண் {



        I3(3),
        I4(4),
        I5(5),
        I7(7),
        I9(9) ;
        List<நடை> நடைகள்;
        பிரிவு பிரிவு;
        int மதிப்பு;
        நடைஎண்(int மதிப்பு) {
            this.மதிப்பு = மதிப்பு;
            நடைகள் = new ArrayList<>();
            if (பிரிவு.I3.மதிப்பு == மதிப்பு) {
                பிரிவு = பிரிவு.I3;
                நடைகள்.add(நடை.த);
                நடைகள்.add(நடை.கி);
                நடைகள்.add(நடை.ட);
            } else if (பிரிவு.I4.மதிப்பு == மதிப்பு) {

                பிரிவு = பிரிவு.I4;
                நடைகள்.add(நடை.த);
                நடைகள்.add(நடை.க);
                நடைகள்.add(நடை.தி);
                நடைகள்.add(நடை.மி);
            } else if (பிரிவு.I5.மதிப்பு == மதிப்பு) {
                பிரிவு = பிரிவு.I5;
                நடைகள்.add(நடை.த);
                நடைகள்.add(நடை.க);
                நடைகள்.add(நடை.த);
                நடைகள்.add(நடை.கி);
                நடைகள்.add(நடை.ட);

            } else if (பிரிவு.I7.மதிப்பு == மதிப்பு) {
                பிரிவு = பிரிவு.I7;

                நடைகள்.add(நடை.த);
                நடைகள்.add(நடை.கி);
                நடைகள்.add(நடை.ட);

                நடைகள்.add(நடை.த);
                நடைகள்.add(நடை.க);
                நடைகள்.add(நடை.தி);
                நடைகள்.add(நடை.மி);

            } else if (பிரிவு.I9.மதிப்பு == மதிப்பு) {
                பிரிவு = பிரிவு.I9;

                நடைகள்.add(நடை.த);
                நடைகள்.add(நடை.க);
                நடைகள்.add(நடை.தி);
                நடைகள்.add(நடை.மி);

                நடைகள்.add(நடை.த);
                நடைகள்.add(நடை.க);
                நடைகள்.add(நடை.த);
                நடைகள்.add(நடை.கி);
                நடைகள்.add(நடை.ட);


            }




        }

        List<நடை> நடைகளைபெறு() {
            return this.நடைகள்;
        }
    }


    enum நடை {
        த,
        கி,
        ட,
        தி,
        க,
        மி;

    }
    enum  பிரிவு {
        I3(3),
        I4(4),
        I5(5),
        I7(7),
        I9(9),
        O(2),
        U(1);
        int மதிப்பு;
        பிரிவு(int மதிப்பு) {
            this.மதிப்பு = மதிப்பு;
        }
    }
    enum லகு {
        I3(3),
        I4(4),
        I5(5),
        I7(7),
        I9(9) ;
        List<கைசைகை> கைசைகைகள்;
        பிரிவு பிரிவு;
        int மதிப்பு;
        லகு(int மதிப்பு) {
            this.மதிப்பு = மதிப்பு;
            கைசைகைகள் = new ArrayList<>();
            if (பிரிவு.I3.மதிப்பு == மதிப்பு) {

                பிரிவு = பிரிவு.I3;

                கைசைகைகள்.add(கைசைகை.தட்டு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
            } else if (பிரிவு.I4.மதிப்பு == மதிப்பு) {
                பிரிவு = பிரிவு.I4;
                கைசைகைகள்.add(கைசைகை.தட்டு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
            } else if (பிரிவு.I5.மதிப்பு == மதிப்பு) {
                பிரிவு = பிரிவு.I5;
                கைசைகைகள்.add(கைசைகை.தட்டு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
            } else if (பிரிவு.I7.மதிப்பு == மதிப்பு) {
                பிரிவு = பிரிவு.I7;
                கைசைகைகள்.add(கைசைகை.தட்டு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);

            } else if (பிரிவு.I9.மதிப்பு == மதிப்பு) {
                பிரிவு = பிரிவு.I9;

                கைசைகைகள்.add(கைசைகை.தட்டு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);

                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);

                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);
                கைசைகைகள்.add(கைசைகை.எண்ணு);

            }

            }
        }





    enum சுழி {
        O(2);

        List<கைசைகை> கைசைகைகள்;
        int மதிப்பு;
        பாணி.பிரிவு பிரிவு;
        சுழி(int மதிப்பு) {
            this.மதிப்பு = மதிப்பு;
            if (பாணி.பிரிவு.O.மதிப்பு == மதிப்பு) {
                this.பிரிவு = பாணி.பிரிவு.O;
                 கைசைகைகள் = new ArrayList<>();
                 கைசைகைகள்.add(கைசைகை.தட்டு);
                 கைசைகைகள்.add(கைசைகை.திருப்பு);
            }
        }
    }


    enum அரைசுழி {
        U(1);

         பாணி.பிரிவு பிரிவு;

        List<கைசைகை> கைசைகைகள்;
        int மதிப்பு;
        அரைசுழி(int மதிப்பு) {
            this.மதிப்பு = மதிப்பு;
            if (பாணி.பிரிவு.U.மதிப்பு == மதிப்பு) {
                this.பிரிவு = பாணி.பிரிவு.U;
                கைசைகைகள்.add(கைசைகை.தட்டு);
            }
        }
    }

    static லகு லகு;

    பாணி(லகு லகு,நடைஎண் நடைஎண்மாறி) {
        this.லகு = லகு;
        this.நடைஎண்மாறி = நடைஎண்மாறி;
    }

    public abstract List<பிரிவு> பெறு();


    public abstract List<கைசைகை> சைகைபெறு();


    public List<Integer> நடையைபெறு() {
        List<Integer> நடைஎண்பட்டியல் = new ArrayList<>();
        பெறு().forEach(பிரிவு->{

            நடைஎண்பட்டியல்.add( பிரிவு.மதிப்பு * நடைஎண்மாறி.மதிப்பு);
        });
        return நடைஎண்பட்டியல்;

    }

    List<நடை> நடைகளைபெறு() {
        return this.நடைஎண்மாறி.நடைகளைபெறு();
    }


    public static class துருவம் extends பாணி {
        லகு I1;
        சுழி O2;
        லகு I3;
        லகு I4;

        துருவம்(லகு லகு) {
            super(லகு, நடைஎண்.I4);
            this.I1= லகு;
            this.O2= சுழி.O;
            this.I3= லகு;
            this.I4= லகு;
        }

        துருவம்(லகு லகு, நடைஎண் நடைஎண்மாறி) {
            super(லகு, நடைஎண்மாறி);

        }

        public List<பிரிவு> பெறு() {
            List<பிரிவு> துருவபாணி = new ArrayList<>();
            துருவபாணி.add(I1.பிரிவு);
            துருவபாணி.add(O2.பிரிவு);
            துருவபாணி.add(I3.பிரிவு);
            துருவபாணி.add(I4.பிரிவு);
            return துருவபாணி;
        }

        @Override
        public List<கைசைகை> சைகைபெறு() {
            List<கைசைகை> துருவபாணி = new ArrayList<>();
            துருவபாணி.addAll(I1.கைசைகைகள்);
            துருவபாணி.addAll(O2.கைசைகைகள்);
            துருவபாணி.addAll(I3.கைசைகைகள்);
            துருவபாணி.addAll(I4.கைசைகைகள்);
            return துருவபாணி;
        }
    }
    public static class மட்டியம் extends பாணி {
        லகு I1;
        சுழி O2;
        லகு I3;



        மட்டியம்(லகு லகு) {
            super(லகு,நடைஎண்.I4);
            I1 = லகு;
            O2 = சுழி.O;
            I3 = லகு;
        }
        மட்டியம்(லகு லகு,நடைஎண் நடைஎண்மாறி ) {
            super(லகு,நடைஎண்மாறி);
            I1 = லகு;
            O2 = சுழி.O;
            I3 = லகு;
        }

        public List<பிரிவு> பெறு() {
            List<பிரிவு> மட்டியபாணி = new ArrayList<>();
            மட்டியபாணி.add(I1.பிரிவு);
            மட்டியபாணி.add(O2.பிரிவு);
            மட்டியபாணி.add(I3.பிரிவு);
            return மட்டியபாணி;
        }

        @Override
        public List<கைசைகை> சைகைபெறு() {
            List<கைசைகை> மட்டியபாணி = new ArrayList<>();
            மட்டியபாணி.addAll(I1.கைசைகைகள்);
            மட்டியபாணி.addAll(O2.கைசைகைகள்);
            மட்டியபாணி.addAll(I3.கைசைகைகள்);
            return மட்டியபாணி;
        }
    }

    public static class ரூபம் extends பாணி {
        சுழி O1;
        லகு I2;
        ரூபம்(லகு லகு) {
            super(லகு, நடைஎண்.I4);
            this.O1 = சுழி.O;
            this.I2 = லகு;
        }

        ரூபம்(லகு லகு, நடைஎண் நடைஎண்மாறி ) {
            super(லகு, நடைஎண்மாறி);
            this.O1 = சுழி.O;
            this.I2 = லகு;
        }


        public List<பிரிவு> பெறு() {
            List<பிரிவு> ரூபகபாணி = new ArrayList<>();
            ரூபகபாணி.add(O1.பிரிவு);
            ரூபகபாணி.add(I2.பிரிவு);
            return ரூபகபாணி;
        }

        @Override
        public List<கைசைகை> சைகைபெறு() {
            List<கைசைகை> ரூபகபாணி = new ArrayList<>();
            ரூபகபாணி.addAll(O1.கைசைகைகள்);
            ரூபகபாணி.addAll(I2.கைசைகைகள்);
            return ரூபகபாணி;
        }
    }

    public static class சம்பை extends பாணி {
        லகு I1;
        சுழி U2;
        லகு I3;
        சம்பை(லகு லகு) {
            super(லகு,நடைஎண்.I4);
            this.I1 = லகு;
            this.U2 = சுழி.O;
            this.I3 = லகு;
        }

        சம்பை(லகு லகு, நடைஎண் நடைஎண்மாறி ) {
            super(லகு,நடைஎண்மாறி);
            this.I1 = லகு;
            this.U2 = சுழி.O;
            this.I3 = லகு;
        }

        public List<பிரிவு> பெறு() {
            List<பிரிவு> சம்பைபாணி = new ArrayList<>();
            சம்பைபாணி.add(I1.பிரிவு);
            சம்பைபாணி.add(U2.பிரிவு);
            சம்பைபாணி.add(I3.பிரிவு);
            return சம்பைபாணி;
        }

        @Override
        public List<கைசைகை> சைகைபெறு() {
            List<கைசைகை> சம்பைபாணி = new ArrayList<>();
            சம்பைபாணி.addAll(I1.கைசைகைகள்);
            சம்பைபாணி.addAll(U2.கைசைகைகள்);
            சம்பைபாணி.addAll(I3.கைசைகைகள்);
            return சம்பைபாணி;
        }
    }

    public static class திரிபுடை extends பாணி {
        லகு I1;
        சுழி O2;
        சுழி O3;
        திரிபுடை(லகு லகு) {
            super(லகு, நடைஎண்.I4);
            I1 = லகு;
            O2 = சுழி.O;
            O3 = சுழி.O;
        }

        திரிபுடை(லகு லகு,நடைஎண் நடைஎண்மாறி) {
            super(லகு, நடைஎண்மாறி);
            I1 = லகு;
            O2 = சுழி.O;
            O3 = சுழி.O;
        }


        public List<பிரிவு> பெறு() {
            List<பிரிவு> திரிபுடைபாணி = new ArrayList<>();
            திரிபுடைபாணி.add(I1.பிரிவு);
            திரிபுடைபாணி.add(O2.பிரிவு);
            திரிபுடைபாணி.add(O3.பிரிவு);
            return திரிபுடைபாணி;
        }

        @Override
        public List<கைசைகை> சைகைபெறு() {
            List<கைசைகை> திரிபுடைபாணி = new ArrayList<>();
            திரிபுடைபாணி.addAll(I1.கைசைகைகள்);
            திரிபுடைபாணி.addAll(O2.கைசைகைகள்);
            திரிபுடைபாணி.addAll(O3.கைசைகைகள்);
            return திரிபுடைபாணி;
        }
    }

    public static class அட extends பாணி {
        லகு I1;
        லகு I2;
        சுழி O3;
        சுழி O4;
        அட(லகு லகு) {
            super(லகு, நடைஎண்.I4);
            I1 = லகு;
            I2 = லகு;
            O3 = சுழி.O;
            O4 = சுழி.O;
        }

        அட(லகு லகு, நடைஎண் நடைஎண்மாறி) {
            super(லகு, நடைஎண்மாறி);
            I1 = லகு;
            I2 = லகு;
            O3 = சுழி.O;
            O4 = சுழி.O;
        }

        public List<பிரிவு> பெறு() {
            List<பிரிவு> அடபாணி = new ArrayList<>();
            அடபாணி.add(I1.பிரிவு);
            அடபாணி.add(I2.பிரிவு);
            அடபாணி.add(O3.பிரிவு);
            அடபாணி.add(O4.பிரிவு);
            return அடபாணி;
        }

        public List<கைசைகை> சைகைபெறு() {
            List<கைசைகை> அடபாணி = new ArrayList<>();
            அடபாணி.addAll(I1.கைசைகைகள்);
            அடபாணி.addAll(I2.கைசைகைகள்);
            அடபாணி.addAll(O3.கைசைகைகள்);
            அடபாணி.addAll(O4.கைசைகைகள்);
            return அடபாணி;
        }
    }

    public static class ஏகம் extends பாணி {
        லகு I1;
        ஏகம்(லகு லகு) {
            super(லகு, நடைஎண்.I4);
            I1 = லகு;
        }

        ஏகம்(லகு லகு, நடைஎண் நடைஎண்மாறி) {
            super(லகு, நடைஎண்மாறி);
            I1 = லகு;
        }

        public List<பிரிவு> பெறு() {
            List<பிரிவு> ஏகபாணி = new ArrayList<>();
            ஏகபாணி.add(I1.பிரிவு);
            return ஏகபாணி;
        }

        @Override
        public List<கைசைகை> சைகைபெறு() {
            List<கைசைகை> ஏகபாணி = new ArrayList<>();
            ஏகபாணி.addAll(I1.கைசைகைகள்);
            return ஏகபாணி;
        }

    }
}
